#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 500)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (5, 5, 5)
                double3 target = (-3.978038343177559e-8, 7.956076863990802e-8, -3.978038254359717e-8)
            }
            dictionary Right = {
                double3 position = (-500, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 500, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./nova.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
)

def "World"
{
    def "nova_carter" (
        prepend apiSchemas = ["SemanticsAPI:Semantics_DR5M"]
        prepend payload = @omniverse://localhost/NVIDIA/Assets/Isaac/4.0/Isaac/Robots/Carter/nova_carter.usd@
    )
    {
        string semantic:Semantics_DR5M:params:semanticData = "nova"
        string semantic:Semantics_DR5M:params:semanticType = "class"
        quatd xformOp:orient = (0.7071067811865476, 0, 0, 0.7071067811865475)
        double3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (-9.5, -0.25, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "joint_wheel_left"
        {
            float drive:angular:physics:targetVelocity = 260
        }

        over "joint_wheel_right"
        {
            float drive:angular:physics:targetVelocity = 180
        }

        over "chassis_link"
        {
        }

        over "caster_frame_base"
        {
        }

        over "caster_swivel_left"
        {
        }

        over "caster_wheel_left"
        {
        }

        over "caster_swivel_right"
        {
        }

        over "caster_wheel_right"
        {
        }

        over "wheel_left"
        {
        }

        over "wheel_right"
        {
        }

        over "dummy_link"
        {
        }

        over "dummy_link_2"
        {
        }
    }
}

